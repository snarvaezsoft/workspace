
# substitution rule to find source code of  libglib2
set substitute-path /tmp/buildd/glib2.0-2.42.1/ /home/seba/c_workspace/c/glib2/glib2.0-2.42.1/


# A set of macros to easily display a linked list in GDB.

define pglist
  phead $arg0 $arg1
  while $ptr
    pnext $arg0
  end
end
document pglist
Print all the elements of a glist
Receive as parameter the data type and the list, example:
gdb> pglist char datalist
end



define phead
  set $ptr = $arg1
  plistdata $arg0
end
document phead
Print the first element of a list. E.g. given the declaration
  Glist *datalist;
  g_list_add(datalist, "Hello");
view the list with something like
gdb> phead char datalist
gdb> pnext char
gdb> pnext char
This macro defines $ptr as the current pointed-to list struct,
and $pdata as the data in that list element
end

define pnext
  set $ptr = $ptr->next
  plistdata $arg0
end
document pnext
You need to call phead first; that will set $ptr.
This macro will step forward in the list, then show the value at
that next element. Give the type of the list data as the only argument

This macro defines $ptr as the current pointed-to list struct
and $pdata as the data in that list element
end

define plistdata
  if $ptr
    set $pdata = $ptr->data
  else
    set $pdata = 0
  end
  if $pdata
    p ($arg0*)$pdata
  else
    p "NULL"
  end
end
document plistdata
This is intended to be used by phead and pnext.  It sets $pdata and prints its value
end


########################################################
##  You can define function to run before or after a given command
## will print cute brackets before and after anything you print
define hook-print
  echo <---\n
end

define hookpost-print
  echo --->\n
end

## the display command will print the value of any expression
## every time the program stops, but if you want to make use
## of a macro or other GDB command at every stop, redefine hook-stop
